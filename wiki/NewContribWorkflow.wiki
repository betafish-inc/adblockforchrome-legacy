#summary Design of a new way for volunteers to easily find things that need doing, and to do them.
#labels Phase-Design

= Introduction =

Currently, when someone decides they'd like to volunteer with AdBlock, they are pointed to HowToContribute.  That document is a big mix of instructions that, to someone who knows nothing about the project structure, can seem daunting and vague.  I (Michael) get the impression that people don't know where to start, and end up not starting at all.

I'd like to replace that with a workflow that breaks tasks into simple, discrete chunks, and provides volunteers with a menu of tasks to complete, each with simple instructions.  That would help casual volunteers who may want to help once, or once a month, so that they can offer their contribution without having to learn everything about the project.  It would also help long-time contributors to the project (myself included), by providing a dashboard of what work is falling through the cracks.

= Strategy =

I picture a single Wikipage where all volunteers can be directed, new and veteran alike.  It has a link to an overview of the project and helping out, a list of tasks that can be performed, and a Dashboard showing some high-level info to act upon.

There are a few parts to the strategy.

== The assembly line ==

Some users may feel comfortable reproducing a bug but not finding the root cause.  Others may enjoy finding the root cause, or reviewing a patch to fix it, but wouldn't be confident writing the patch.  Some may only want to due initial Issue triage, marking Duplicates or asking for clarification from users.  Finally, some people who normally would want to write code may need a change of pace, and would enjoy just gathering clarification for a while.

Using an assembly line metaphor would help support these volunteers, allowing many people contribute a little to closing an Issue.  This also lets volunteers use their most in-demand skills most of the time (e.g. rather than a veteran volunteer triaging, clarifying, reproing, debugging, and fixing an issue, she may spend most of her time fixing and reviewing issues.)

*Here's how the assembly line could work:*

Volunteers are presented with a list of tasks they could perform, e.g. "Reproduce a bug" or "Check whether a new Issue is a duplicate."

Selecting one of these tasks would show three things:

  # A list of Issues that need that task done.  Every task should have an associated label or status in the Issue tracker, so that this list can be created with a custom search.  E.g. 'Repro-Unknown' Issues need repro.  (This means we'll need to change our existing flow, and convert the few hundred existing open Issues to the new flow.)
  # A link to detailed instructions for how to accomplish the task.  E.g. exactly how one goes about reproducing a bug.  It's a link rather than inline, so that once the volunteer understands the instructions, they don't clutter up the UI.
  # Instructions for how to modify the Issue when done with the task.  E.g. label it 'Repro-Confirmed' or comment that you failed to reproduce the bug.  Changing the label would likely remove it from the list in step 2 and add it to a list for a different task.

Can you picture it?  There's a staircase that each Issue has to climb, from Task 1 through Task N.  People can hop in at any step and help lift some issues to the next step on the staircase.  And because each stair step is defined by labels, we should be able to quickly see which step has the most Issues accumulated waiting for help.

== Dashboard ==

Today, if an issue gets commented upon but not followed up, it just grows stale in the tracker.  Ideally, we'd know exactly which Issues still need attention, and work to close them.

So we have a dashboard, which is just a few more custom searches, like the Issue lists in the assembly line.  It allows everyone to see which Issues are languishing, so that it's immediately obvious to a newcomer which ones need the most help.  See the Details below for what the Dashboard might show.

== Automate ==

Write scripts to automate absolutely everything that can be automated, so volunteers can focus time on applying their skills rather than performing drudge work.  See the Details below for things we could automate.


= Details =

== Stages of an Issue ==

The most common and complex type is a Defect, whose stages are:

  # Status:New - _just filed_
  # Status:Accepted - _we didn't set it to :Invalid :WontFix :Duplicate
    * (Gets default labels: Repro-Unknown Cause-Unknown Clarity-Unknown)
    * Clarity-WaitingForUser - _waiting for a reply to clarify the Issue.  Used to be called MoreInfoNeeded._
    * Clarity-Clear - _no more info needed from user to proceed_
    * Repro-Confirmed - _bug was reproduced_
    * Cause-Known - _root cause of bug discovered_
  # Status:Coding Owner:(somebody) - _enough is understood that someone is writing code to fix the Issue_
    * (Gets default labels: Repro-Unknown Cause-Known Clarity-Clear if not otherwise specified)
    * CodeReview-NeedsReview - _Owner is done coding, needs code review_
    * CodeReview-NeedsWork - _Code reviewer found problems, back to Owner_
  # Status:ReadyForRelease - _Code reviewer feels it's ready to merge_
  # Status:Fixed - _Merged into trunk_

Ownership means "I'm working on this; nobody work on it but me".  It avoids duplication of effort.  Note that only Status:Coding requires an Owner, but a user can become Owner to find the root cause if it looks tricky (again to avoid duplication of effort).  Users may only assign themselves as Owners of issues, and may unassign if they don't want to keep working on it.

== Assembly line ==

TODO 


== Dashboard ==

The simplest way this will be handled is that each list of tasks in the assembly line can be sorted by modified date, so the stalest tasks come first.  But there are a couple of other custom searches that I can think of that might be helpful:

  # A list of ALL open issues ordered by Modified Date. _(Yes, we can get this list and some of the others today, but it's not provided in a one-stop UI for lots of people to easily see and act upon.)_  The oldest will linger at the top of the list until we do something about it.
    * Michael thought about also having all open issues order by Modified Date descending, so we colud see the newest issues easily, but I think that being forced to view them in oldest-to-newest order will encourage us to work to close old Issues.
  # We want to be aware very quickly of urgent issues.  We could try letting reporters opt in to having their issue labeled Urgent to appear in an Urgent list (and get emailed to interested parties, including Michael).  We can always unlabel Urgent if it's misapplied.  This may prove too spammy or a failure, but it can't hurt to try.
  # An 'unloved' list.  It contains issues that are stalled for a certain time, where the amount of time is different depending on the step they're on.  Issues that are unloved can get reviewed periodically so the reviewer can try to get some attention to the bug.  E.g. if an Issue hasn't moved from New to Repro-Confirmed,Clarity-Understood in X days, or doesn't get an Owner after Y days having been repro'd and understood, or Z days in Status:NeedsReview -- then a reviewer can ping possible volunteers to help get to the next step, or can do the work himself.  (Michael will review this list if nobody else does.)

== Automate ==

Google Project Hosting has an API.  A robot could watch issue changes and take actions.  Here's the list so far:

  * Issues with 'urgent' in subject get labeled Urgent, emails sent to interested parties
  * Issues with Clarity-WaitingForUser become Clarity-Unknown when a non-project-member replies
  * Issues with Clarity-WaitingForUser become Status:Invalid, Restrict-Comment-Commit after X days with no reply; adds comment explaining how to refile if desired
  * Issues with Status:Coding but no owner become Status:Accepted, with a comment explaining that an Owner is needed
    * _(Michael doesn't like this much.  It's dumb that Status:Coding requires Owner, but he can't think of a better workflow.)_
  * Issues with an Owner lose the Owner after X days with no activity; adds comment asking for someone to take ownership when they have time to work on the Issue
  * Issues that arrive on the 'unloved' Dashboard list get emailed to afc-dev, so we are driven to close the bugs to shut up the nagbot.
  * (add your own)

= Problems =

Problems with the above:

  * How does a volunteer filter out the Issues that they don't care about personally, but don't warrant a WontFix?
    * Only starred: owner: and reporter: allow 'me' in the searchfield, customizing the search by user
    * Could provide Chrome extension letting you Hide issues from the page
  * (add your own)
  
    