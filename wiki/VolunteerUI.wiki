#summary Resources for volunteers

Thanks for helping out with !AdBlock!  If you are new here, please *[#Overview READ THIS FIRST]*.

= Ways to help =

Volunteering is easy, even if you don't know much about the project.  You could *answer common questions* from users ([#How_to_Answer_questions_on_the_mailing_list instructions]), or *translate !AdBlock* into your language ([HowToTranslate instructions]).  Where help is most needed is with *issue reports*: read the instructions for something that sounds interesting below to get started.  If you get at all stuck, email one of the mailing lists mentioned [#Overview here] and we'll be happy to help you out!

*First*: Clean up [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label%3ACleanUp&colspec=ID+Stars+Type+Status+Priority+Area+Summary&cells=tiles these issues]: make sure Type, Status, and Owner are correct according to [#Definition_of_Type these definitions].  _TODO Michael will probably do this in an afternoon and delete this paragraph at that point_

|| <h3>You could do this</h3> || <h3>to one of these</h3> || <h3>like this</h3> || <h3>doing this when you're done</h3> ||
|| *Clarify* an issue || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect,enhancement%20-has%3Aowner+Status%3ANew+-label%3AMoreInfoNeeded&sort=modified&colspec=ID+Opened+Modified+Type+Summary issues] || [#How_to_Clarify_an_issue instructions] || [#After_you_Clarify_an_issue instructions] ||
|| *Reproduce* a bug || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect%20-has:owner%20Status:New%20-MoreInfoNeeded&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [#How_to_Reproduce_a_bug instructions] || [#After_you_Reproduce_a_bug instructions] ||
|| *Triage* a bug report/feature request || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect,enhancement%20-has:owner%20Status:New%20-MoreInfoNeeded&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [#How_to_Triage_an_issue instructions] || [#After_you_Triage_an_issue instructions] ||
|| Find the *root cause* of a defect|| [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=Type=Defect%20Status:Accepted%20-has:Owner%20-Cause:Known%20-MoreInfoNeeded&sort=modified&colspec=ID%20Opened%20Modified%20Status%20Summary issues] || [#How_to_Find_the_root_cause_of_a_defect instructions] || [#After_you_find_the_root_cause_of_a_defect instructions] ||
|| *Write code* to fix a bug || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=Type=Defect%20Status:Accepted%20-has:Owner%20-MoreInfoNeeded&sort=Cause+Modified&colspec=Cause%20ID%20Opened%20Modified%20Status%20Summary issues] || [#How_to_Write_code_to_address_an_issue instructions] || [#After_you_Write_code_to_address_an_issue instructions] ||
|| *Write code* to implement a feature || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=Type=Enhancement%20Status:Accepted%20-has:Owner%20-MoreInfoNeeded&sort=Cause+Modified&colspec=Cause%20ID%20Opened%20Modified%20Status%20Summary issues] || [#How_to_Write_code_to_address_an_issue instructions] || [#After_you_Write_code_to_address_an_issue instructions] ||
|| Do a *code review* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=status:needsreview&sort=modified&colspec=ID%20Opened%20Modified%20Owner%20Summary issues] || [#How_to_Do_a_code_review instructions] || [#After_you_Do_a_code_review instructions] ||
|| Process an *ad report* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=adreport%20-has:owner%20Status:New%20-label%3AMoreInfoNeeded&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [#How_to_Process_an_ad_report instructions] || [#After_you_Process_an_ad_report instructions] ||
|| Judge an *Urgent issue* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label%3AUrgent&sort=opened&colspec=ID+Opened+Modified+Priority+Reporter+Status+Summary issues] || [#How_to_Judge_an_Urgent_issue instructions] || [#After_you_Judge_an_Urgent_issue instructions] ||
|| Update a *`MoreInfoNeeded`* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label:MoreInfoNeeded&sort=-modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [#How_to_Update_a_MoreInfoNeeded instructions] || [#After_you_Update_a_MoreInfoNeeded instructions] ||

= Other helpful views =

Issues that [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=owner:me&sort=id&colspec=ID%20Opened%20Modified%20Status%20Type%20Summary you own] (work on these before other Issues; here is info on when to [#Definition_of_Owner own] and [#When_should_I_de-own_an_Issue? de-own] an Issue) and that are [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=-owner:me%20has:owner&sort=modified&colspec=ID%20Owner%20Opened%20Modified%20Status%20Type%20Summary owned by others].

All open issues sorted by when they were [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=&sort=opened&colspec=ID%20Opened%20Modified%20Status%20Summary%20WaitingOn%20BlockedOn opened], [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=&sort=modified&colspec=ID%20Opened%20Modified%20Status%20Summary%20WaitingOn%20BlockedOn last modified]

[link Unloved issues] _TODO it needs to be easy to see in what way they're unloved to make it easier to take action on them_

<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

=Instructions=

=== How to Clarify an issue ===

Issue reporters rarely supply all the information that is asked of them.  Clarifying an issue means adding clarifying information, or leaving comments that ask questions of the reporter, until we have all the information that we need to proceed.

We need different information for bug reports vs feature requests.  *Bug reports* are supposed to list the exact steps needed for someone to reproduce the problem.  There should be no ambiguity about what to type, where to click, what is expected to happen, and what does happen.  *Feature requests* just need to be clear enough that we can understand what the user is proposing and why it would be useful.

If you read the Issue and feel that this information is missing, simply *leave a comment with any clarifying questions*.

[#Volunteers,_Contributors,_and_Committers Contributors] can *add clarifying labels*: if you learn that the issue only applies to *one* browser or OS, add a `Browser-` or `OpSys-` label.

[#Volunteers,_Contributors,_and_Committers Contributors] can *improve the Issue Summary*.  Be sure to mention the old summary in a comment, so it's not lost.  For example, if a user filed a report called "Can't get videos right" and you learn that the problem is actually that Youtube videos don't play in Safari when posted on Facebook, you could leave a comment saying `[old Summary: "Can't get videos right"]` and change the Summary to `Youtube videos embedded in Facebook posts don't play properly in Safari`.

=== After you Clarify an issue ===

If you ask questions, [#Volunteers,_Contributors,_and_Committers Contributors] should *label the Issue `MoreInfoNeeded`*.  This label lets others know that we're waiting to hear back from the reporter.  It also *removes the Issue* from most of the [#Ways_to_help "Ways to help" lists], so consider also *starring the issue*, so that you'll know as soon as a response comes back that the [#How_to_Update_a_MoreInfoNeeded label can be removed].

If you feel that a *bug report* is clear enough to reproduce, then the next thing to do is [#How_to_Reproduce_a_bug reproduce it] :)

If you feel that a *feature request* is clear enough to proceed, then set `Status:Accepted`, or ask a [#Volunteers,_Contributors,_and_Committers Contributor] to do it.

If you review an Issue and realize that it is not a valid bug report or feature request (e.g. it's a [#Definition_of_Status Duplicate], or an [#Definition_of_Type Ad Report], or blank), then you could [#How_to:_Triage_an_issue triage the Issue].

=== How to Reproduce a bug ===

Bug reports aren't very useful if no one but the reporter can see the buggy behavior.  For that reason, the [http://code.google.com/p/adblockforchrome/issues/entry?template=Defect bug report template] asks the reporter to list the specific steps that someone else can follow to reproduce the problem.

Once a bug report is [#How_to_Clarify_an_issue clear enough] to understand how to reproduce it, just follow the reproduction steps and see if the bug happens to you too.

=== After you Reproduce a bug ===

If you fail to reproduce the bug, leave a comment saying "I could not reproduce this bug", and explain what happened when you tried it.  You should mention what browser version, !AdBlock version, and operating system you are using, as well as any other relevant information.

If you *can* reproduce the bug, leave a comment saying "Confirmed", again mentioning your browser version, !AdBlock version, and operating system, and if you're a [#Volunteers,_Contributors,_and_Committers Contributor], set `Status:Accepted`.  You could then move on to [#How_to_Find_the_root_cause_of_a_defect figuring out the cause of the bug].

Special case: If the bug report is that a non-ad is being blocked ([http://code.google.com/p/adblockforchrome/issues/detail?id=6422 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=6643 example]), it's almost certainly because of an over-aggressive filter.  You can direct the user to http://chromeadblock.com/bugs/hunting , which will walk them through finding and reporting the filter; or if you're feeling generous, you could do it yourself, set `Status:ReportToList`, and leave a comment like
<pre>
I followed the steps at chromeadblock.com/bugs/hunting to find that this is caused by the filter
  ##div.banner
which is in the EasyList filter list.  I have reported it to EasyList, and when they fix the
problem you'll automatically be updated with the fix.
</pre>

=== How to Triage an issue ===

Triage is the process of reviewing newly-filed Issues and figuring out what to do with them.  New Issues are always coming in.  Without triage, the issue tracker gets messy, important Issues go unnoticed for too long, and some Issues get missed entirely.

Triage is therefore one of the most *important and useful things that you can do* as a volunteer.  Unfortunately, it takes a little more knowledge of the project to triage effectively than to [#How_to_Clarify_an_issue clarify an issue] or [#How_to_Reproduce_a_bug reproduce a bug].  Also, most of the actions you would take when triaging require being a [#Volunteers,_Contributors,_and_Committers Contributor].  So if you're new to the project, you might want to start with clarifying/reproducing for while to get familiar with the project.

Here are the things you can do to a new (`Status:New`) issue:

 * Set `Status:Duplicate` if there is *another report of the same issue* ([http://code.google.com/p/adblockforchrome/issues/detail?id=7067 example).  This requires being familiar with all the issues that have arrived lately, or at least reviewing the last few weeks' reports and searching the older reports.
 * Set `Status:Invalid` if a bug report is clearly *not !AdBlock's fault* (in which case, tell the user what to do instead: [http://code.google.com/p/adblockforchrome/issues/detail?id=5118 example]).  This requires understanding the limits of what !AdBlock can and can not do.
 * Set `Status:Invalid` if the report is not in fact an !AdBlock issue, but is e.g. a question (in which case, point the user to the relevant [FrequentlyAskedQuestions FAQ] entry.)
 * Set `Status:WontFix` if you're positive that this is an issue on which !AdBlock *will not take action* ([http://code.google.com/p/adblockforchrome/issues/detail?id=7004 example]).  This requires being with the project for long enough that you've already heard the arguments about why we won't address this issue.  (!AdBlock is a [#Overview benevolent dictatorship] and Michael will review all `WontFix`s, so if you're *almost* positive, you could set `WontFix` and let Michael un-set it if he disagrees.)
 * Set `Priority-Critical` if *this is a critical issue* ([#What_is_a_critical_issue? definition]).
 * Unset the label `Urgent` if it was applied incorrectly.  See [#How_to_Judge_an_Urgent_issue How to Judge an Urgent issue].

=== After you Triage an issue ===

If you haven't closed the Issue, it will remain sitting in the Triage list until it's moved to `Status:Accepted`.  So you could try to move it in that direction by [#How_to_Clarify_an_issue clarifying the Issue] or [#How_to_Reproduce_a_bug reproducing the bug], saving others from doing redundant triage.

=== How to Find the root cause of a defect ===

Once a bug has been [#How_to_Reproduce_a_bug reproduced], we need to know the cause in order to fix it.  The person who finds the cause doesn't have to be the person who fixes the bug.  If you don't feel that you have the time or ability to write code, you can still save someone else time by figuring out where in the code the problem lies -- and I'm sure they would appreciate your effort!  This is also a great way to get to know !AdBlock's code better, to prepare you to submit your own patches.

!AdBlock is a normal [http://developer.chrome.com/extensions/index.html browser extension].  You can use Chrome's excellent [https://developers.google.com/chrome-developer-tools/docs/overview Developer Tools] to debug it.  The Console tab lets you review logs and errors; the Elements tab lets you view the DOM layout; and the Sources tab lets you add breakpoints to !AdBlock's code and step through it one step at a time.

chrome://chrome/extensions has a link to !AdBlock's `_generated_background_page.html`, where the bulk of !AdBlock's work happens; the rest happens in [http://developer.chrome.com/extensions/content_scripts.html content scripts] on each webpage.  You can open the Developer Tools on any webpage to view !AdBlock's content scripts (in the Sources tab, click the icon at the top left, choose Content Scripts, then click the triangle next to the first item.)

`manifest.json` is the file that describes !AdBlock's structure to Chrome.  That's a good place to start to decide which files to look at.  If you don't know where to start, but would like to try to find the cause of a defect, leave a comment asking for guidance on the Issue, and someone more experienced can try to point you toward likely places to investigate.

*Editing the source*

Often it is useful to modify the source code; e.g. to force a function to return true, or to comment out large sections of code to see if it makes a bug go away.  To do this, you'll want a local copy of the latest !AdBlock release, which you can get by running
{{{
svn checkout http://adblockforchrome.googlecode.com/svn/tags/2.5.40 adblockforchrome-read-only
}}}
replacing `2.5.40` with [Changelog the current release number].  You'll need svn installed on Linux, or !TortoiseSVN installed on Windows; more info is [http://code.google.com/p/adblockforchrome/source/checkout here].

Once you have your local copy, go to chrome://chrome/extensions, select Developer Mode -> Load Unpacked Extension, and select the folder containing the local copy.  Now !AdBlock is running from that local copy (be sure to disable any other running copies.)  Now you can make changes to the code in that folder, then click the Reload link on chrome://chrome/extensions to load the changed version.

*Debugging in Safari*

If you must debug in Safari, it's a little less pleasant than Chrome.  You can use the Developer Tools to view content scripts on a page, but you can't inspect !AdBlock's background page without installing !AdBlock from a local folder.  Visit the Developer menu -> Extension Builder -> + sign and select a folder containing !AdBlock's source code.  The folder name must end with `.safariextension`, e.g. `adblock-version-2.5.40.safariextension`.  (I think you will need a [https://developer.apple.com/support/safari/developer-certificates.html Safari Developer Certificate] as well in order to install even this test extension.)

Once the local copy is installed, you can scroll down to "Inspect Global Page" in the Extension Builder to open the Developer Tools on the background page, and click Reload in the Extension Builder after making source code changes.

`Info.plist` is the file that describes !AdBlock to Safari, like Chrome's `manifest.json`.  Safari loads some different files from Chrome, so that's a good place to start when looking around.

=== After you Find the root cause of a defect ===

If you failed to find the cause, but learned something, *leave a comment mentioning what you tried and what failed*.  For example,
<pre>
I couldn't figure out why Wikipedia keeps turning pink.  I tried completely removing the 
toolbar button, which didn't make a difference.  When it does turn pink, the
<div id="header"> section of the page gets a 'color:pink' style attribute attached, but 
I have no idea why.  It happens even when I turn off all filter lists, so it can't be a 
bad filter.  In AdBlock's background.js line 400 it says
   if (domain === "msn.com")
     page.style.color = "pink";
but Wikipedia doesn't load any resources from msn.com, according to the Developer Tools 
Resources tab.
</pre>

If you do find the cause, *leave a comment being as specific as possible about the cause.*  Remember that whoever comes after you won't have just spent half an hour staring at the code, so she won't have all the context and knowledge in her head that you have right now.  For instance, this is not very useful:
<pre>I found the problem: We think Wikipedia is loading from msn.com, so it's turning pink.</pre>
Better, but still not great:
<pre>
I found the problem: 'domain' is a global variable in the function fix_msn_background, so it's bleeding through to
wikipedia.</pre>
Best:
<pre>
I found the problem: 'domain' is accidentally defined as a global variable in background.js line 250.  If you load
Wikipedia in one tab and msn.com in a second tab, then fix_msn_background() is called, 'domain' is set to 'msn.com',
and background.js line 400 is triggered when Wikipedia loads its next resource.  I expect we could fix it by making
'domain' a local variable, but I haven't tried it.</pre>

If you are a [#Volunteers,_Contributors,_and_Committers Contributor], you should set the label `Cause-Known`; if not, a Contributor will come behind you and set it.  This lets people who are going to [#How_to_Write_code_to_address_an_issue write code] see which Issues are already debugged.  In fact, they'll see `Cause-Known` issues listed first, to encourage people to at least debug Issues that they want to see fixed.

=== How to Write code to address an issue ===

First, remember that this is a [#Overview benevolent dictatorship], so even if an issue has been [#How_to_Triage_an_issue triaged] and the consensus is to proceed, Michael might overrule and set `Status:WontFix`  (usually on a feature request that he feels is unnecessary).  It's frustrating to write lots of code and then find out it's not going to be used!  Right now there's no way to tell if Michael has reviewed an issue, so if you're worried about wasting your time, just drop a line to the [http://groups.google.com/group/adblockforchrome-dev developer mailing list] and ask him if he would accept a patch addressing the Issue.

Second, be sure to read and *conform to the [#Coding_style coding style guide]*, or you'll just have to fix your code after it gets reviewed.

If the design of the solution isn't obvious, you could start a thread on the [http://groups.google.com/group/adblockforchrome-dev developer mailing list] and point to it in an Issue comment, or just debate the design directly in the Issue comments, until it's clear how to approach the problem.

Here's the process for a *non-[#Volunteers,_Contributors,_and_Committers Committer]* to write code to address an issue:

 # Optionally set yourself as `Owner`, so that others don't [#Definition_of_Owner duplicate your work].  If it's a quick fix or you expect no one else will work on it, don't bother, but you'll probably want to cc yourself or star the issue so that you get emailed comments.  If you aren't a [#Volunteers,_Contributors,_and_Committers Contributor], leave a comment saying you'd like to be the `Owner`, and someone will set it for you.
 # Using svn on Linux or !TortoiseSVN on Windows, [http://code.google.com/p/adblockforchrome/source/checkout check out the read-only copy of trunk].
 # Make your changes, testing them in the browser (see instructions in [#How_to_Find_the_root_cause_of_a_defect "How to Find the root cause of a defect".])
 # For huge bonus points, also add unit tests to `tools/tests/test.html`.
 # Generate a patch ([http://ariejan.net/2007/07/03/how-to-create-and-apply-a-patch-with-subversion svn instructions], [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-patch.html TortoiseSVN instructions].
 # Leave a comment on the Issue thoroughly explaining what was changed and what was fixed and how to test it, and ask for code review.  Add the patchfile as an attachment.

Here's the process for a *[#Volunteers,_Contributors,_and_Committers Committer]* to write code to address an issue:

 # Optionally set yourself as `Owner`, so that others don't [#Definition_of_Owner duplicate your work].  If it's a quick fix or you expect no one else will work on it, don't bother, but you'll probably want to cc yourself or star the issue so that you get emailed comments.
 # Using svn on Linux or !TortoiseSVN on Windows, copy `https://adblockforchrome.googlecode.com/svn/trunk` to `https://adblockforchrome.googlecode.com/svn/branches/issue-5740` (of course with the correct Issue number.)  _The first time you do this, you may have to [http://code.google.com/p/adblockforchrome/source/checkout authenticate]._  Then check out a local copy of that folder.
 # Make your changes, testing them in the browser (see instructions in [#How_to_Find_the_root_cause_of_a_defect "How to Find the root cause of a defect".])
 # For huge bonus points, also add unit tests to `tools/tests/test.html`.
 # Check them in to `branches/issue-5740`.  You can do this as one giant checkin, or as many small checkins; no one will pay attention until you ask for code review.  *Important:* The commit message should start with the line `Update issue 5740`, which will append your commit message as an Issue comment.  Be very explicit in your commit messages about what was changed, what was fixed, and how to test it.

Sometimes !AdBlock will need a custom filter in order to fix a problem.  Users are subscribed to the !AdBlock Custom filter list, which lives in filters/adblock_custom.txt.  If you add a filter there, it will be shipped the next time Michael ships the filter list; you can cc adblockforchrome to ask him to do so.

=== After you Write code to address an issue ===

Set `Status:NeedsReview`, so that someone else will review your code.  If there's someone in particular from whom you'd appreciate code review, cc them with your request.  (If you aren't a [#Volunteers,_Contributors,_and_Committers Contributor] you'll have to leave a comment requesting review/cc, and a Contributor will set these for you.)

If your code has problems, it will be set to `Status:Started` by a reviewer.  In that case, look for feedback in comments on the Issue and on specific revisions ([http://code.google.com/p/adblockforchrome/source/detail?r=4590 example]), argue with the reviewer(s), make changes, and set `Status:NeedsReview` when you're done.

=== Coding style ===

Code that you submit in a patch or a branch should conform to the following style rules, unless you have a good reason to break the rules :)

Comment every non-one-liner function that you write with a description of what it does, a list of inputs, and what it returns. See background.js for some examples. When in doubt about whether a chunk of code makes sense, lead it with a comment explaining what's going on.  When you implement strange-looking code to handle Issue 1234, it suffices to say `// Issue 1234` so readers know where to learn more.  In general, *err on the side of too many comments*, since dozens of strangers may read your code this year without understanding as much as you do about the context.

Variables should be clearly named instead of short.  `ClassesAreNamedLikeThis`; `functionsNamedLikeThis`; `_privateFuntionsLikeThis`; `variables_like_this`; `_private_variables_like_this` ("private" meaning "not meant for use outside this object.")  When in doubt, follow the capitalization of the code around you.

There are lots of ways in !JavaScript to define a class, its constructor, and its prototype.  Follow this format:
{{{
function ClassName(x, y) {
  this._privateVar1 = x;
  this.publicVar2 = y;
}
ClassName.staticMethod = function(x) {
};
ClassName.prototype = {
  method1: function(x) {
  },
  method2: function(x) {
  }
};
}}}

Equality should be `===`, not `==`.  In regular expressions, put a `\` before every non-special character except `[a-zA-Z0-9_-]` so that it's obvious that all other characters are special characters.  E.g. `/^\@\@\|\|ads-r-us\.com(\/ad_content)+$/`

We didn't always have a style guide, so unfortunately the code isn't 100% adherent to the rules above. Refactoring is great -- whenever you touch some code, feel free to clean it up.

=== How to Do a code review ===

Code that goes into !AdBlock's trunk is almost always reviewed first.  Having at least one other person see your code greatly increases the chance of getting it right.

Anyone can review code.  Even if you don't understand that area of !AdBlock, you can comment on style and suggest ways to simplify or clarify the code.  Even if you don't have time to download and test the code, you can still read it in the browser.

To review code that is in a branch:
 # Look through the Issue's comments for each revision checkin.  If the author did things correctly, every revision should have resulted in a comment.
 # Click each revision and then click 'Expand all' to see the code changes in that revision.  Or, check out a local copy of trunk and do something like `svn merge --reintegrate https://adblockforchrome.googlecode.com/svn/branches/issue-5740 && svn diff` in order to view the combined effect of all the revisions.
 # If the change is non-trivial, check out a copy of the branch with something like `svn checkout http://adblockforchrome.googlecode.com/svn/branches/issue-5740 adblock-issue-5740-for-codereview` and test it in the browser (see instructions in [#How_to_Find_the_root_cause_of_a_defect "How to Find the root cause of a defect".])
 # If the change includes unit tests, open tools/tests/test.html in your browser to run them.
 # Check that the code adheres to the [#Coding_style style guide].
 # Leave comments with suggestions/bugs/questions in the "General comment" field for any specific revision, or double click any line of code in a revision to leave an in-line comment ([http://code.google.com/p/adblockforchrome/source/detail?r=4590 example]).  You can also give an overall Positive or Negative review score.

To review a patch submitted by a non-Contributor, you'll have to just read the patch and leave a comment in the Issue with your feedback.  To test it, you'd have to apply the patch to a local copy of trunk.  (If you're a [#Volunteers,_Contributors,_and_Committers Committer], it would be kind of you to create a branch on behalf of the original author, so that reviewers can review the branch properly.)

=== After you Do a code review ===

If you left review comments but don't feel confident enough to decide whether to ship the code (or prevent it from shipping), you don't have to do anything else.  The author and other reviewer(s) will take your comments into consideration.

If your review was positive, all issues raised by other reviewers have been settled, you've tested the code, and you are confident that it is ready to ship to millions of users, then *set `Status:ReadyForRelease`*.  *Don't do this lightly!*  Michael will then merge it to trunk and set `Status:Fixed`, and it will be shipped in the next release.

If you are confident that the code needs work before shipping, set `Status:Started`.  Be sure that the negative code review(s) contain specific points that needed to be addressed, so that the author knows how to proceed.  (The author will probably address the concerns you raised by changing code, but on some of the points you may debate and then decide that no change is necessary.  For example, if you suggest a refactoring, and the author feels the change wouldn't add much benefit, and the style guide is not violated, well, there's no strong argument either way... so make the change yourself and get it reviewed, or let the matter drop.)

=== How to Process an ad report ===

`Type-AdReport` Issues ([http://code.google.com/p/adblockforchrome/issues/detail?id=7028 example]) are the end result of the !AdBlock ad reporting wizard.  [FrequentlyAskedQuestions#I_see_an_ad!__How_do_I_report_it? Try it yourself] on a random webpage to see what it does.

Many reports don't have all the information filled out.  Specifically, they'll often fail to specify exactly where the ad is on the page.  In that case, you can *ask clarifying questions*, perhaps *request a screenshot*, and *set the label `MoreInfoNeeded`* if you are a [#Volunteers,_Contributors,_and_Committers Contributor].  That label will take the ad report out of the "to process" list until a response comes back.

At the end of the report it should list which filter lists and custom filters the reporter has.  Make your copy of !AdBlock have *the same filter lists and custom filters* under !AdBlock Options.  Then:

1. If you *can not see the ad*, leave a comment like `I do not see the ad when subscribed to the same filter lists as the reporter.  If you Update Filters under AdBlock Options -> Filter Lists and restart your browser, do you still see the ad?` and set the label `MoreInfoNeeded`.

2. If you *can see the ad*, disable !AdBlock under chrome://chrome/extensions and install [http://adblockplus.org Adblock Plus for Chrome].  ABP is a separate project that should be able to block just about everything that !AdBlock does and vice versa.

2a. If ABP also shows the ad, then this ad report should have never been filed.  Set `Status:ReportToList` and leave a comment like `This is due to a missing filter in [the report's main filter list for the webpage's language], a filter list which AdBlock does not control.  Please report this to them.  Their contact info is on ListAuthorContacts.`

2b. If ABP does not show this ad, then this is a bug in !AdBlock.  Set the label `Type-Defect` and `Status:Accepted`, change the summary to something like `ESPN.com ad not blocked (blocked in ABP)`, and leave a comment summarizing how to reproduce the problem, e.g. `Visit http://espn.com/go/some-page.html in AdBlock 2.5.40.  You'll see a large ad take up the whole screen that you have to close to proceed.  This does not happen in ABP.`

=== After you Process an ad report ===

After you've set `MoreInfoNeeded`, or `Type-Defect`, or `Status:ReportToList`, you're done.  If you're not a Contributor so you can't make those changes, just leave a comment requesting them and a Contributor will do it for you.

=== How to Judge an Urgent issue ===

_You need to be a [#Volunteers,_Contributors,_and_Committers Contributor] to judge Urgent issues._

Issue reporters have the option to [http://code.google.com/p/adblockforchrome/issues/entry?template=URGENT%20Defect label their bug report Urgent].  In addition to showing up in the [#Ways_to_help "Judge an Urgent issue" list], these Issues are emailed to anyone [http://code.google.com/p/adblockforchrome/issues/subscriptions subscribed to] the `Urgent` label.

We tell issue reporters to only do this if they think the Issue is [#What_is_a_critical_issue? critical], in which case we'll send out emergency alarm emails.  To discourage spam, we warn them that we will probably move the Issue to the bottom of our TODO list if they are wrong.

If you think that an `Urgent`-labeled Issue is in fact [#What_is_a_critical_issue? critical], *label it `Priority-Critical`*.  Michael's personal email address is subscribed to that label so that he'll be notified even on a day off -- and anyone else willing to lend a hand with critical issues can also [http://code.google.com/p/adblockforchrome/issues/subscriptions subscribe] to the `Priority-Critical` label.

If you think that an `Urgent`-labeled Issue is not critical, just *unlabel it `Urgent`* and leave an explanatory comment like `This is not urgent because, even though there's a visible effect on a popular website, the website can still be used.` or `This is not urgent because the broken website is not used by millions of people.`

=== After you Judge an Urgent issue ===

You are probably the first person who has noticed this Issue.  If it's now `Priority-Critical`, it would be great for you to [#How_to_Reproduce_a_bug reproduce] and [#How_to_Clarify_an_issue clarify] the bug, and even to start [#How_to_Find_the_root_cause_of_a_defect debugging it], so that by the time others notice the Issue you'll have moved it closer to shipping a fix.

If the issue is serious but not critical, it will get addressed once it reaches the top of the [#Ways_to_help "Triage an issue" list].

If the issue is clearly not critical -- the reporter was abusing the `Urgent` label to get attention -- then you should actively *ignore it for a while* in keeping with our spam warning.

=== What is a critical issue? ===

An issue is critical and should be labeled `Priority-Critical` (thus sending scary alert emails to potentially lots of people) if it *is reproducible* (it's not a freak problem on one user's computer) and:
 * !AdBlock *crashes or stops ad blocking* on all web pages ([http://code.google.com/p/adblockforchrome/issues/detail?id=6360 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=6360 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=6253 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=6194 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=5384 example])
 * !AdBlock *interrupts browsing* for most users ([http://code.google.com/p/adblockforchrome/issues/detail?id=6238 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=6322 example])
 * major visible *!AdBlock UI is broken* (e.g. the context menu is gone, or the install or Options page is blank) ([http://code.google.com/p/adblockforchrome/issues/detail?id=6243 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=5389 example])
 * it breaks *filter list updates* ([http://code.google.com/p/adblockforchrome/issues/detail?id=1809 example]
 * it is a *security bug* allowing XSS or other compromise of user anonymity ([http://code.google.com/p/adblockforchrome/issues/detail?id=5558 example])
 * it *affects a giant website*, either by *showing ads* or *breaking a site feature*.  "Giant" means a *major* search engine, social network, news outlet, etc -- something used by many millions of users ([http://code.google.com/p/adblockforchrome/issues/detail?id=4362 example], [http://code.google.com/p/adblockforchrome/issues/detail?id=4694 example])

=== How to Update a `MoreInfoNeeded` ===

_You need to be a [#Volunteers,_Contributors,_and_Committers Contributor] to update `MoreInfoNeeded` issues._

An Issue is labeled `MoreInfoNeeded` when we're waiting on a user to leave a comment with more information.  `MoreInfoNeeded` issues are not shown in most of the [#Ways_to_help "Ways to help" lists], since we can't really take action on them without that information.  So removing the label promptly when the user replies is important.

Unfortunately, when the user replies, the `MoreInfoNeeded` label isn't auto-removed, so you should *remove it when a reply comes in*.  The list in [#Ways_to_help "Ways to help"] shows the most recently modified `MoreInfoNeeded` issues first, as those are the ones that will probably have a reply.

If the user replied but didn't provide the needed information, re-ask the question in a clearer way and don't remove the label.

If the user replies to say that the bug no longer appears, set `Status:Fixed`.

If the user has not replied in 14 days, set `Status:Invalid` with the comment
<pre>
Over 14 days ago we requested some additional information, but we didn't get any.  If
you still have this problem, feel free to open a new Issue and mention this Issue's number.
</pre>

=== After you Update a `MoreInfoNeeded` ===

Now that there is more information, you could check whether the issue [#How_to_Clarify_an_issue is now clear] and can proceed toward being fixed.

=== How to Answer questions on the mailing list ===

Theoretically, users seeking answers should be directed to the [Support Support page], which has links to the FAQs before they are directed to email the adblockforchrome-discuss@googlegroups.com mailing list or to email Michael directly.  But some users either don't see those links or find a link to the mailing list somewhere else.

So most of the [http://groups.google.com/group/adblockforchrome-discuss posts to the mailing list] can be answered by [FrequentlyAskedQuestions the FAQ].  You could help these users by politely pointing them to a relevent answer, e.g.
<pre>
Thanks for your question.  See
  http://code.google.com/p/adblockforchrome/wiki/FrequentlyAskedQuestions#How_do_I_uninstall_AdBlock_? 
for the answer.
</pre>

If you wanted to politely ask the user whether they had seen the link to the FAQ, that would be helpful as well.  They might say they found a link to the mailing list elsewhere, which we can try to replace with a link to [Support Support], or that they skimmed the FAQ but missed the answer, which suggests we might try to simplify the FAQ.

*Important:* If you subscribe to the mailing list and reply over email, *be sure to reply-all*, because replies by default go only to the poster (so that they don't have to subscribe to the list to ask a single question.)  Reply-all will send your reply to the list as well, so others know that the question has been answered.  If the user replies back to you, they may reply directly to you; just cc adblockforchrome-discuss@googlegroups.com when you reply back to them.

=== Definition of Type ===

*Type-Enhancement*: request for !AdBlock to do something it can't currently do.  There's nothing broken, it would just make !AdBlock better in the reporter's opinion.

*Type-Defect*: a bug in !AdBlock.  Something that can be described as a specific set of steps that should lead to an expected behavior but lead to a buggy behavior instead.  (The difference between `Defect` and `Enhancement` can be fuzzy if the lack of a feature is considered a bug.)

*Type-!AdReport*: The end result of the !AdBlock ad reporting wizard.  It represents an ad that a user has found on a page.

=== Definition of Status ===

|| *Open Statuses* || *Meaning* ||
|| `New` || Not yet reproduced (for Defects/!AdReports) or understood (for Enhancements). ||
|| `Accepted` || Reproduced or understood, and not closed as `Invalid`/`Duplicate`/`WontFix`. ||
|| `NeedsReview` || Code has been written and is ready for code review. ||
|| `ReadyForRelease` || Someone reviewed the code and is confident that it code is ready to merge into trunk. ||
|| `Started` || Someone reviewed the code and in their opinion it still needs work. ||

|| *Closed Statuses* || *Meaning* ||
|| `Fixed`  || Code to address the Issue is in trunk. ||
|| `Invalid` || Insufficient data / not a valid issue ||
|| `Duplicate` || This report duplicates an existing Issue ||
|| `WontFix` || We decided to not take action on this issue ||
|| `WaitingOn[Browser]` || Can't address this without support from `Browser`, e.g. Chrome ||
|| `ReportToList` || This `AdReport` should be reported to a filter list maintainer ||

=== Definition of Owner ===

Anyone can work anywhere in the code.  Setting yourself to Owner of an Issue just means:

 * You plan to debug or write code against the Issue in the next few days; or your code got a negative code review and is waiting for your attention.  (So you should rarely be Owner of more than one or two Issues that aren't [#Definition_of_Status Status:Started].)
 * You might de-own it if you decide not to work on it after all.
 * Others can still work on the Issue, but they're probably duplicating your work.  A better idea is for them to offer help, so you can work together.

=== When should I de-own an Issue? ===

You own issues to tell others that you will address this issue very soon, so that they avoid duplicating your work.  If you don't work on an issue for a week or so, de-own it until you're ready to work on it.

When you de-own an issue, you could leave a comment summarizing what progress you've made, for the benefit of whomever picks up where you left off.

<br><br><br><br><br><br>
=Overview=

Thanks for being interested in volunteering on the !AdBlock project!  Five minutes from now you could be doing useful work on the project.  But first, here are some important things to know before deciding whether or not to volunteer.

 # !AdBlock is free-as-in-speech, open sourced under the *GPLv3*.
 # !AdBlock is free-as-in-beer, though *users may _optionally_ pay any amount* for !AdBlock.
 # I (Michael Gundlach) created !AdBlock, and I work on it for a living.  I'm paid by my one-man corporation !BetaFish Incorporated, which receives user payments and owns the rights to !AdBlock.  *Volunteers are not paid*.
 # I run the open source project as a *benevolent dictatorship*.  I encourage your feedback and I'll take it into account, but I make the final decisions, and you might not always agree with me :)
 # *Being nice* is part of the culture.  Constructive criticism, heated technical debate, and politely declining a user's feature request are all good.  Being rude is not OK - even if a user is irate and clueless, or a volunteer makes an obvious mistake.
 # Over 10 million people use !AdBlock.  By volunteering, you can make the world a slightly better place for millions of people!

If the above sounds good to you, then, welcome! :)  Say hi on !AdBlock's [mailto:adblockforchrome-discuss@googlegroups.com public mailing list], and if you plan to stick around for any length of time, subscribe to [http://groups.google.com/group/adblockforchrome-dev adblockforchrome-dev], the mailing list for !AdBlock development.  Then grab an Issue from [#Ways_to_help Ways To Help] and have fun!

=== Volunteers, Contributors, and Committers ===

All you need in order to *volunteer* is a Google account, so that you can create or comment on Issues.  That's sufficient for most volunteer work.

By default volunteers can't do more powerful things like closing duplicate issues or labeling issues.  Someone with official *Contributor* status would have to do it for them.  But it's easy to become a Contributor: if you've worked on, say, more than a dozen issues over more than a week, just ask for Contributor status on the [http://groups.google.com/group/adblockforchrome-dev developer mailing list].  We'll grant it after we check that you've been updating Issues correctly.

Any volunteer can write code, attaching a patch to an Issue comment.  Once you've had a few of your patches accepted into !AdBlock's trunk, feel free to ask for Committer status on the [http://groups.google.com/group/adblockforchrome-dev developer mailing list].  *Committers* can make changes to !AdBlock's source tree directly.


<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>