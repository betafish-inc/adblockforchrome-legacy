#summary Resources for volunteers

Thanks for helping out with !AdBlock!  If you are new here, please *[#Overview READ THIS FIRST]*.

= Ways to help =

Volunteering is easy, even if you don't know much about the project.  Just find an interesting-sounding task below, and follow the given instructions to get started.  If you get at all stuck, we'll be happy to help you out on the mailing list (see [#Overview READ THIS FIRST].)

*First*: Clean up [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label%3ACleanUp&colspec=ID+Stars+Type+Status+Priority+Area+Summary&cells=tiles these issues]: make sure Type, Status, and Owner are correct according to [#Definition_of_Type these definitions].  _TODO Michael will probably do this in an afternoon and delete this paragraph at that point_

|| <h3>You could do this</h3> || <h3>to one of these</h3> || <h3>like this</h3> || <h3>doing this when you're done</h3> ||
|| *Clarify* an issue || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect,enhancement%20-has%3Aowner+Status%3ANew+-label%3AMoreInfoNeeded&sort=modified&colspec=ID+Opened+Modified+Type+Summary issues] || [#How_to_Clarify_an_issue instructions] || [#After_you_Clarify_an_issue instructions] ||
|| *Reproduce* a bug || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect%20-has:owner%20Status:New&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [#How_to_Reproduce_a_bug instructions] || [#After_you_Reproduce_a_bug instructions] ||
|| *Triage* a bug report/feature request || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect,enhancement%20-has:owner%20Status:New&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| Find the *root cause* of a defect|| [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect%20status:accepted%20-has:owner&sort=modified&colspec=ID%20Opened%20Modified%20Status%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| *Write code* to fix a bug || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=defect%20status:accepted%20-has:owner&sort=cause+modified&colspec=Cause%20ID%20Opened%20Modified%20Status%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| *Write code* to implement a feature || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=enhancement%20status:accepted%20-has:owner&sort=modified&colspec=ID%20Opened%20Modified%20Status%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| Do a *code review* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=status:needsreview&sort=modified&colspec=ID%20Opened%20Modified%20Owner%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| Process an *ad report* || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=type=adreport%20-has:owner%20Status:New&sort=modified&colspec=ID%20Opened%20Modified%20Type%20Summary issues] || [instructions instructions] || [instructions instructions] ||
|| Update a *`MoreInfoNeeded`* (TODO automate) || [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label%3AMoreInfoNeeded&sort=modified&colspec=ID+Opened+Modified+Type+Summary issues] || [instructions instructions] || [instructions instructions] ||

= My issues =

You own [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=owner:me&sort=id&colspec=ID%20Opened%20Modified%20Status%20Type%20Summary these] open issues.

_Owning an issue means no one else will work on it, so you shouldn't own more than a few issues at once, and you should usually work on these issues before any others.  ([#When_should_I_de_own_an_issue? When should I de-own an issue?])_

= Other helpful views =

All open issues sorted by when they were [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=&sort=opened&colspec=ID%20Opened%20Modified%20Status%20Summary%20WaitingOn%20BlockedOn opened], [http://code.google.com/p/adblockforchrome/issues/list?can=2&q=&sort=modified&colspec=ID%20Opened%20Modified%20Status%20Summary%20WaitingOn%20BlockedOn last modified] - Figure out what these old issues need in order to move toward resolution.

[http://code.google.com/p/adblockforchrome/issues/list?can=2&q=label%3AUrgent&sort=opened&groupby=&colspec=ID+Opened+Modified+Status+Owner+Summary&nobtn=Update All issues labeled Urgent] - [link instructions] _TODO instructions include: To be notified when these come in, [http://code.google.com/p/adblockforchrome/issues/subscriptions subscribe] to the Urgent label._ _TODO robot converts subject:urgent into label:Urgent_

[link Unloved issues] _TODO it needs to be easy to see in what way they're unloved to make it easier to take action on them_

<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

=Instructions=

=== How to Clarify an issue ===

Issue reporters rarely supply all the information that is asked of them.  Clarifying an issue means adding clarifying information, or leaving comments that ask questions of the reporter, until we have all the information that we need to proceed.

We need different information for bug reports vs feature requests.  *Bug reports* are supposed to list the exact steps needed for someone to reproduce the problem.  There should be no ambiguity about what to type, where to click, what is expected to happen, and what does happen.  *Feature requests* just need to be clear enough that we can understand what the user is proposing and why it would be useful.

If you read the Issue and feel that this information is missing, simply *leave a comment with any clarifying questions*.

[#Volunteers,_Contributors,_and_Committers Contributors] can *add clarifying labels*: if you learn that the issue only applies to one browser or OS, add a `Browser-` or `OpSys-` label.

[#Volunteers,_Contributors,_and_Committers Contributors] can *improve the Issue Summary*.  Be sure to mention the old summary in a comment, so it's not lost.  For example, if a user filed a report called "Can't get videos right" and you learn that the problem is actually that Youtube videos don't play in Safari when posted on Facebook, you could leave a comment saying `[old Summary: "Can't get videos right"]` and change the Summary to `Youtube videos embedded in Facebook posts don't play properly in Safari`.

=== After you Clarify an issue ===

If you ask questions, *label the Issue `MoreInfoNeeded`* if you have the ability.  This label lets others know that we're waiting to hear back from the reporter.  It also moves the Issue out of the "Clarify an issue" list until that time.

If you feel that a *bug report* is clear enough to reproduce, then the next thing to do is [#How_to_Reproduce_a_bug reproduce it] :)

If you feel that a *feature request* is clear enough to proceed, then leave a comment saying "Ready to set Status:Accepted" -- or if you're a [#Volunteers,_Contributors,_and_Committers Contributor], just set `Status:Accepted`.

If you review an Issue and realize that it is not a valid bug report or feature request (e.g. it's a [#Definition_of_Status Duplicate], or an [#Definition_of_Type Ad Report], or blank), then you could [#How_to:_Triage_an_issue triage the Issue].

=== How to Reproduce a bug ===

Bug reports aren't very useful if no one but the reporter can see the buggy behavior.  For that reason, the [http://code.google.com/p/adblockforchrome/issues/entry?template=Defect bug report template] asks the reporter to list the specific steps that someone else can follow to reproduce the problem.

Once a bug report is [#How_to_Clarify_an_issue clear enough] to understand how to reproduce it, just follow the reproduction steps and see if the bug happens to you too.

=== After you Reproduce a bug ===

If you fail to reproduce the bug, leave a comment saying "I could not reproduce this bug", and explain what happened when you tried it.  You should mention what browser version, !AdBlock version, and operating system you are using, as well as any other relevant information.

If you *can* reproduce the bug, leave a comment saying "Confirmed", again mentioning your browser version, !AdBlock version, and operating system, and if you're a [#Volunteers,_Contributors,_and_Committers Contributor], set `Status:Accepted`.  You could then move on to [#How_to_Find_the_root_cause_of_a_defect figuring out the cause of the bug].

=== How to Triage an issue ===

TODO

=== After you Triage an issue ===

TODO

=== How to Find the root cause of a defect ===

Once a bug has been [#How_to_Reproduce_a_bug reproduced], we need to know the cause in order to fix it.  The person who finds the cause doesn't have to be the person who fixes the bug.  If you don't feel that you have the time or ability to write code, you can still save someone else time by figuring out where in the code the problem lies -- and I'm sure they would appreciate your effort!  This is also a great way to get to know !AdBlock's code better, to prepare you to submit your own patches.

!AdBlock is a normal [http://developer.chrome.com/extensions/index.html browser extension].  You can use Chrome's excellent [https://developers.google.com/chrome-developer-tools/docs/overview Developer Tools] to debug it.  The Console tab lets you review logs and errors; the Elements tab lets you view the DOM layout; and the Sources tab lets you add breakpoints to !AdBlock's code and step through it one step at a time.

chrome://chrome/extensions has a link to !AdBlock's `_generated_background_page.html`, where the bulk of !AdBlock's work happens; the rest happens in [http://developer.chrome.com/extensions/content_scripts.html content scripts] on each webpage.  You can open the Developer Tools on any webpage to view !AdBlock's content scripts (in the Sources tab, click the icon at the top left, choose Content Scripts, then click the triangle next to the first item.)

`manifest.json` is the file that describes !AdBlock's structure to Chrome.  That's a good place to start to decide which files to look at.  If you don't know where to start, but would like to try to find the cause of a defect, leave a comment asking for guidance on the Issue, and someone more experienced can try to point you toward likely places to investigate.

*Editing the source*

Often it is useful to modify the source code; e.g. to force a function to return true, or to comment out large sections of code to see if it makes a bug go away.  To do this, you'll want a local copy of the latest !AdBlock release, which you can get by running
{{{
svn checkout http://adblockforchrome.googlecode.com/svn/tags/2.5.40 adblockforchrome-read-only
}}}
replacing `2.5.40` with [Changelog the current release number].  You'll need svn installed on Linux, or !TortoiseSVN installed on Windows; more info is [http://code.google.com/p/adblockforchrome/source/checkout here].

Once you have your local copy, go to chrome://chrome/extensions, select Developer Mode -> Load Unpacked Extension, and select the folder containing the local copy.  Now !AdBlock is running from that local copy (be sure to disable any other running copies.)  Now you can make changes to the code in that folder, then click the Reload link on chrome://chrome/extensions to load the changed version.

*Debugging in Safari*

If you must debug in Safari, it's a little less pleasant than Chrome.  You can use the Developer Tools to view content scripts on a page, but you can't inspect !AdBlock's background page without installing !AdBlock from a local folder.  Visit the Developer menu -> Extension Builder -> + sign and select a folder containing !AdBlock's source code.  The folder name must end with `.safariextension`, e.g. `adblock-version-2.5.40.safariextension`.  (I think you will need a [https://developer.apple.com/support/safari/developer-certificates.html Safari Developer Certificate] as well in order to install even this test extension.)

Once the local copy is installed, you can scroll down to "Inspect Global Page" in the Extension Builder to open the Developer Tools on the background page, and click Reload in the Extension Builder after making source code changes.

`Info.plist` is the file that describes !AdBlock to Safari, like Chrome's `manifest.json`.  Safari loads some different files from Chrome, so that's a good place to start when looking around.

=== After you Find the root cause of a defect ===

If you failed to find the cause, but learned something, *leave a comment mentioning what you tried and what failed*.  For example,
{{{
I couldn't figure out why Wikipedia keeps turning pink.  I tried completely removing the toolbar button, which didn't make a difference.
When it does turn pink, the <div id="header"> section of the page gets a 'color:pink' style attribute attached, but I have no idea why.
It happens even when I turn off all filter lists, so it can't be a bad filter.  In AdBlock's background.js line 400 it says
   if (domain === "msn.com")
     page.style.color = "pink";
but Wikipedia doesn't load any resources from msn.com, according to the Developer Tools Resources tab.
}}}

If you do find the cause, *leave a comment being as specific as possible about the cause.*  Remember that whoever comes after you won't have just spent half an hour staring at the code, so she won't have all the context and knowledge in her head that you have right now.  For instance, this is not very useful:
{{{
I found the problem: We think Wikipedia is loading from msn.com, so it's turning pink.
}}}
Better, but still not great:
{{{
I found the problem: 'domain' is a global variable in the function fix_msn_background, so it's bleeding through to wikipedia.
}}}
Best:
{{{
I found the problem: 'domain' is accidentally defined as a global variable in background.js line 250.  If you load Wikipedia in one tab and msn.com in a second tab, then fix_msn_background() is called, 'domain' is set to 'msn.com', and background.js line 400 is triggered when Wikipedia loads its next resource.  I expect we could fix it by making 'domain' a local variable, but I haven't tried it.
}}}

If you are a [#Volunteers,_Contributors,_and_Committers Contributor], you should set the label `Cause-Known`; if not, a Contributor will come behind you and set it.  This lets people who are going to [#How_to_Write_code_to_address_an_issue write code] see which Issues are already debugged.  In fact, they'll see `Cause-Known` issues listed first, to encourage people to at least debug Issues that they want to see fixed.

=== How to Write code to address an issue ===

First, remember that this is a [#Overview benevolent dictatorship], so even if an issue has been [#How_to_Triage_an_issue triaged] and the consensus is to proceed, Michael might overrule and set `Status:WontFix`  (usually on a feature request that he feels is unnecessary).  It's frustrating to write code and then find out it's not going to be used!  Right now there's no way to tell if Michael has reviewed an issue, so if you're worried about wasting your time, just `cc adblockforchrome` and ask him if he would accept a patch addressing this issue.

Here's the process for a *non-[#Volunteers,_Contributors,_and_Committers Committer]* to write code to address an issue:

 # Optionally set yourself as `Owner`, so that others don't [#Definition_of_Owner duplicate your work].  If it's a quick fix or you expect no one else will work on it, don't bother.  If you aren't a [#Volunteers,_Contributors,_and_Committers Contributor], leave a comment saying you'd like to be the `Owner`, and someone will set it for you.
 # Using svn on Linux or !TortoiseSVN on Windows, [http://code.google.com/p/adblockforchrome/source/checkout check out the read-only copy of trunk].
 # Make your changes, testing them in the browser (see instructions in [#How_to_Find_the_root_cause_of_a_defect "How to Find the root cause of a defect".])
 # Generate a patch ([http://ariejan.net/2007/07/03/how-to-create-and-apply-a-patch-with-subversion svn instructions], [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-patch.html TortoiseSVN instructions].
 # Leave a comment on the Issue thoroughly explaining what was changed and what was fixed and how to test it, and ask for code review.  Add the patchfile as an attachment.

Here's the process for a *[#Volunteers,_Contributors,_and_Committers Committer]* to write code to address an issue:

 # Optionally set yourself as `Owner`, so that others don't [#Definition_of_Owner duplicate your work].  If it's a quick fix or you expect no one else will work on it, don't bother.  If you aren't a [#Volunteers,_Contributors,_and_Committers Contributor], leave a comment saying you'd like to be the `Owner`, and someone will set it for you.
 # Using svn on Linux or !TortoiseSVN on Windows, copy `https://adblockforchrome.googlecode.com/svn/trunk` to `https://adblockforchrome.googlecode.com/svn/branches/issue-5740` (of course with the correct Issue number.)  _The first time you do this, you may have to [http://code.google.com/p/adblockforchrome/source/checkout authenticate]._  Then check out a local copy of that folder.
 # Make your changes, testing them in the browser (see instructions in [#How_to_Find_the_root_cause_of_a_defect "How to Find the root cause of a defect".])
 # Check them in to `branches/issue-5740`.  You can do this as one giant checkin, or as many small checkins; no one will pay attention until you ask for code review.  *Important:* The commit message should start with the line `Update issue 5740`, which will append your commit message as an Issue comment.  Be very explicit in your commit messages about what was changed.

(TODO: style guide)

TODO

=== After you Write code to address an issue ===

TODO

=== How to Do a code review ===

TODO

=== After you Do a code review ===

TODO

=== How to Process an ad report ===

TODO

=== After you Process an ad report ===

TODO

=== Definition of Type ===

*Type-Enhancement*: request for !AdBlock to do something it can't currently do.  There's nothing broken, it would just make !AdBlock better in the reporter's opinion.

*Type-Defect*: a bug in !AdBlock.  Something that can be described as a specific set of steps that should lead to an expected behavior but lead to a buggy behavior instead.  (The difference between `Defect` and `Enhancement` can be fuzzy if the lack of a feature is considered a bug.)

*Type-!AdReport*: The end result of the !AdBlock ad reporting wizard.  It represents an ad shown, or a non-ad blocked, that doesn't have the same behavior in Adblock Plus.  _TODO Does every legitimate !AdReport become a Defect, and the rest become !ReportToList?_

=== Definition of Status ===

|| *Open Statuses* || *Meaning* ||
|| `New` || Not yet reproduced (for Defects/AdReports) or understood (for Enhancements). ||
|| `Accepted` || Reproduced or understood, and not closed as `Invalid`/`Duplicate`/`WontFix`. ||
|| `NeedsReview` || Code has been written and is ready for code review. ||
|| `ReadyForRelease` || Someone reviewed the code and is confident that it code is ready to merge into trunk. ||
|| `Started` || Someone reviewed the code and in their opinion it still needs work. ||

|| *Closed Statuses* || *Meaning* ||
|| `Fixed`  || Code to address the Issue is in trunk. ||
|| `Invalid` || Insufficient data / not a valid issue ||
|| `Duplicate` || This report duplicates an existing Issue ||
|| `WontFix` || We decided to not take action on this issue ||
|| `WaitingOn[Browser]` || Can't address this without support from `Browser`, e.g. Chrome ||
|| `ReportToList` || This `AdReport` should be reported to a filter list maintainer ||

=== Definition of Owner ===

Anyone can work anywhere in the code.  Setting yourself to Owner of an Issue just means:

 * You plan to debug or write code against the Issue in the next few days.
 * You might de-own an Issue if you change your mind.
 * Others can still debug or write code against the Issue, but they're probably duplicating your work.  A better idea is for them to offer help, so you can work together.

=== When should I de-own an Issue? ===

You own issues to tell others that you will address this issue very soon, so that they avoid duplicating your work.  If you don't work on an issue for a week or so, de-own it until you're ready to work on it.

When you de-own an issue, you could leave a comment summarizing what progress you've made, for the benefit of whomever picks up where you left off.

<br><br><br><br><br><br>
=Overview=

Thanks for being interested in volunteering on the !AdBlock project!  Five minutes from now you could be doing useful work on the project.  But first, here are some important things to know before deciding whether or not to volunteer.

 # !AdBlock is free-as-in-speech, open sourced under the *GPLv3*.
 # !AdBlock is free-as-in-beer, though *users may _optionally_ pay any amount* for !AdBlock.
 # I (Michael Gundlach) created !AdBlock, and I work on it for a living.  I'm paid by my one-man corporation !BetaFish Incorporated, which receives user payments and owns the rights to !AdBlock.  *Volunteers are not paid*.
 # I run the open source project as a *benevolent dictatorship*.  I encourage your feedback and I'll take it into account, but I make the final decisions, and you might not always agree with me :)
 # *Being nice* is part of the culture.  Constructive criticism, heated technical debate, and politely declining a user's feature request are all good.  Being rude is not OK - even if a user is irate and clueless, or a volunteer makes an obvious mistake.
 # Over 10 million people use !AdBlock.  By volunteering, you can make the world a slightly better place for millions of people!

If the above sounds good to you, then, welcome! :)  Say hi on !AdBlock's [mailto:adblockforchrome-discuss@googlegroups.com public mailing list], and if you plan to stick around for any length of time, subscribe to [https://groups.google.com/forum/?fromgroups#!forum/adblockforchrome-dev adblockforchrome-dev], the mailing list for !AdBlock development.  Then grab an Issue from "Ways to help" above and have fun!

=== Volunteers, Contributors, and Committers ===

All you need in order to *volunteer* is a Google account, so that you can create or comment on Issues.  That's sufficient for most volunteer work.

By default volunteers can't do more powerful things like closing duplicate issues or labeling issues.  Someone with official *Contributor* status would have to do it for them.  But it's easy to become a Contributor: if you've worked on, say, more than a dozen issues over more than a week, just ask for Contributor status on the [https://groups.google.com/forum/?fromgroups#!forum/adblockforchrome-dev developer mailing list].  We'll grant it after we check that you've been updating Issues correctly.

Any volunteer can write code, attaching a patch to an Issue comment.  Once you've had a few of your patches accepted into !AdBlock's trunk, feel free to ask for Committer status on the [https://groups.google.com/forum/?fromgroups#!forum/adblockforchrome-dev developer mailing list].  *Committers* can make changes to !AdBlock's source tree directly.


<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>